#!/bin/bash

[[ -n "$CROWDR_TRACE" || -n "$CROWDR_DRY" ]] && set -x
if [[ ! -n "$CROWDR_CFG" ]]; then
    if [[ -d ".crowdr" ]]; then
        CROWDR_CFG=".crowdr/config.sh"
    else
        CROWDR_CFG="crowdr.cfg.sh"
    fi
fi
CROWDR_DIR="$(dirname $CROWDR_CFG)"
CROWDR_HOOKDIR="$CROWDR_DIR/hooks"
if [[ -n "$CROWDR_DRY" ]]; then
    DEBUG='echo'
    HOOK_EXEC='cat'
else
    HOOK_EXEC='source'
fi
declare -A opts_run
declare -A opts_build
declare -A opts_image
declare -A opts_command
declare -A opts_hook
config_containers=""

trap exit INT

fullname() {
    printf $name_format $project $1
}

get_running_containers() {
    docker ps \
        --filter "label=crowdr.project=$project" \
        --format '{{.Names}}'
}

get_all_containers() {
    docker ps \
        --all \
        --filter "label=crowdr.project=$project" \
        --format '{{.Names}}'
}

run_hook(){
    local container="$1"
    local hook="$2"
    [[ -n ${opts_hook["${container}~$hook"]} ]] && ${opts_hook["${container}~$hook"]}
}

command_version() {
    echo "0.11.0"
}

command_build() {
    for c in $config_containers; do
        if [[ -n "${opts_build[$c]}" ]]; then
            run_hook $c before.build
            $DEBUG docker build -t $c ${opts_build[$c]} || exit
            run_hook $c after.build
        fi
    done
}

command_run() {
    local image
    local container
    command_rm --force > /dev/null
    for container in $config_containers; do
        run_hook $container before.run
        image=$container
        [[ -n "${opts_image[$container]}" ]] && image="${opts_image[$container]}"
        $DEBUG docker run \
            --label crowdr.project=$project \
            --detach \
            --tty \
            --name $container \
            ${opts_run[$container]} \
            "$image" \
            ${opts_command[$container]} > /dev/null && echo $container
        run_hook $container after.run
    done
}

command_start() {
    local container
    for container in $(get_all_containers); do
        $DEBUG docker start $container
    done
}

command_stop() {
    local container
    for container in $(get_running_containers | tac); do
        $DEBUG docker stop $container
    done
}

command_stats() {
    $DEBUG docker stats $(get_all_containers)
}

command_ps() {
    $DEBUG docker ps --filter="label=crowdr.project=$project" "$@"
}

command_ip() {
    local containers=$(get_all_containers)
    if [[ "$containers" != "" ]]; then
        $DEBUG docker inspect \
            --format '{{printf "%-30s %-30s" .Name .NetworkSettings.IPAddress}}' \
            $containers
    fi
}

command_shell() {
    $DEBUG docker exec \
        --interactive \
        --tty \
        $1 bash
}

command_exec() {
    $DEBUG docker exec \
        --interactive \
        --tty \
        "$@"
}

command_pipe() {
    $DEBUG docker exec \
        --interactive \
        "$@"
}

command_restart() {
    echo "Stopping..."
    command_stop
    echo
    echo "Starting..."
    command_start
}

command_kill() {
    local container
    for container in $(get_running_containers | tac); do
        $DEBUG docker kill "$@" $container
    done
}

command_rm() {
    local container
    for container in $(get_all_containers | tac); do
        $DEBUG docker rm "$@" $container
    done
}

command_rmi() {
    local image=""
    for c in $config_containers; do
        run_hook $c before.rmi
        image=$c
        [[ -n "${opts_image[$c]}" ]] && image="${opts_image[$c]}"
        $DEBUG docker rmi "${image}"
        run_hook $c after.rmi
    done
}

parse_cfg() {
    local container=""
    local option=""
    local value=""
    local link=""
    local alias=""
    local hook_name=""
    local hook_script=""
    local names=()
    source $CROWDR_CFG
    while read container option value; do
        container="$(fullname $container)"
        names+=("$container")
        case $option in
            command)
                opts_command[$container]=$value
                continue
                ;;
            image)
                opts_image[$container]=$value
                continue
                ;;
            build)
                opts_build[$container]=$value
                continue
                ;;
            link)
                link="${value%%:*}"
                link="$(fullname $link)"
                alias="${value##*:}"
                value="$link:$alias"
                ;;
            after.*|before.*)
                opts_hook["$container~$option"]="$value"
                continue
                ;;
        esac
        opts_run[$container]+=" --$option=$value"
    done < <(grep -vP '^#|^\S*$' <<< "$config")
    config_containers="$(printf '%s\n' "${names[@]}" | uniq )"
}

cmd="${1:-run}"
shift
parse_cfg
[[ -x $CROWDR_HOOKDIR/before.$cmd ]] && $HOOK_EXEC $CROWDR_HOOKDIR/before.$cmd
command_$cmd "$@"
[[ -x $CROWDR_HOOKDIR/after.$cmd  ]] && $HOOK_EXEC $CROWDR_HOOKDIR/after.$cmd
exit 0
