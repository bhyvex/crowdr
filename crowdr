#!/bin/bash

[[ -n "$CROWDR_TRACE" || -n "$CROWDR_DRY" ]] && set -x
if [[ ! -n "$CROWDR_CFG" ]]; then
    if [[ -d ".crowdr" ]]; then
        CROWDR_CFG=".crowdr/config.sh"
    else
        CROWDR_CFG="crowdr.cfg.sh"
    fi
fi
CROWDR_DIR="$(dirname $CROWDR_CFG)"
CROWDR_HOOKDIR="$CROWDR_DIR/hooks"
if [[ -n "$CROWDR_DRY" ]]; then
    CROWDR_DEBUG='echo'
    CROWDR_HOOK_EXEC='cat'
else
    CROWDR_HOOK_EXEC='source'
fi
declare -A crowdr_opts_run
declare -A crowdr_opts_build
declare -A crowdr_opts_image
declare -A crowdr_opts_command
declare -A crowdr_opts_hook
declare -A crowdr_names

trap exit INT

crowdr_fullname() {
    printf $crowdr_name_format $crowdr_project $1
}

crowdr_get_running_containers() {
    docker ps \
        --filter "label=crowdr.project=$crowdr_project" \
        --format '{{.Names}}'
}

crowdr_get_all_containers() {
    docker ps \
        --all \
        --filter "label=crowdr.project=$crowdr_project" \
        --format '{{.Names}}'
}

crowdr_run_hook(){
    local container="$1"
    local hook="$2"
    [[ -n ${crowdr_opts_hook["${container}~$hook"]} ]] && ${crowdr_opts_hook["${container}~$hook"]}
}

crowdr_command_version() {
    echo "0.11.0"
}

crowdr_command_build() {
    local container
    for container in ${!crowdr_names[@]}; do
        if [[ -n "${crowdr_opts_build[$container]}" ]]; then
            crowdr_run_hook $container before.build
            $CROWDR_DEBUG docker build -t $container ${crowdr_opts_build[$container]} || exit
            crowdr_run_hook $container after.build
        fi
    done
}

crowdr_command_run() {
    local image
    local container
    crowdr_command_rm --force > /dev/null
    for container in ${!crowdr_names[@]}; do
        crowdr_run_hook $container before.run
        image=$container
        [[ -n "${crowdr_opts_image[$container]}" ]] && image="${crowdr_opts_image[$container]}"
        $CROWDR_DEBUG docker run \
            --label crowdr.project=$crowdr_project \
            --label crowdr.name=${crowdr_names[$container]} \
            --detach \
            --tty \
            --name $container \
            ${crowdr_opts_run[$container]} \
            "$image" \
            ${crowdr_opts_command[$container]} > /dev/null && echo $container
        crowdr_run_hook $container after.run
    done
}

crowdr_command_start() {
    local container
    for container in $(crowdr_get_all_containers); do
        crowdr_run_hook $container before.start
        $CROWDR_DEBUG docker start $container
        crowdr_run_hook $container after.start
    done
}

crowdr_command_stop() {
    local container
    for container in $(crowdr_get_running_containers | tac); do
        crowdr_run_hook $container before.stop
        $CROWDR_DEBUG docker stop $container
        crowdr_run_hook $container after.stop
    done
}

crowdr_command_stats() {
    $CROWDR_DEBUG docker stats $(crowdr_get_all_containers)
}

crowdr_command_ps() {
    $CROWDR_DEBUG docker ps --filter="label=crowdr.project=$crowdr_project" "$@"
}

crowdr_command_ip() {
    local containers=$(crowdr_get_all_containers)
    if [[ "$containers" != "" ]]; then
        $CROWDR_DEBUG docker inspect \
            --format '{{printf "%-30s %-30s" .Name .NetworkSettings.IPAddress}}' \
            $containers
    fi
}

crowdr_command_shell() {
    $CROWDR_DEBUG docker exec \
        --interactive \
        --tty \
        $(crowdr_fullname $1) bash
}

crowdr_command_exec() {
    local name=$(crowdr_fullname $1)
    shift
    $CROWDR_DEBUG docker exec \
        --interactive \
        --tty \
        $name "$@"
}

crowdr_command_pipe() {
    local name=$(crowdr_fullname $1)
    shift
    $CROWDR_DEBUG docker exec \
        --interactive \
        $name "$@"
}

crowdr_command_restart() {
    echo "Stopping..."
    crowdr_command_stop
    echo
    echo "Starting..."
    crowdr_command_start
}

crowdr_command_kill() {
    local container
    for container in $(crowdr_get_running_containers | tac); do
        crowdr_run_hook $container before.kill
        $CROWDR_DEBUG docker kill "$@" $container
        crowdr_run_hook $container after.kill
    done
}

crowdr_command_rm() {
    local container
    for container in $(crowdr_get_all_containers | tac); do
        crowdr_run_hook $container before.rm
        $CROWDR_DEBUG docker rm "$@" $container
        crowdr_run_hook $container after.rm
    done
}

crowdr_command_rmi() {
    local image
    local container
    for container in ${!crowdr_names[@]}; do
        crowdr_run_hook $container before.rmi
        image=$container
        [[ -n "${crowdr_opts_image[$container]}" ]] && image="${crowdr_opts_image[$container]}"
        $CROWDR_DEBUG docker rmi "${image}"
        crowdr_run_hook $container after.rmi
    done
}

crowdr_parse_cfg() {
    local container
    local option
    local value
    local link
    local alias
    local short_name
    source $CROWDR_CFG
    while read container option value; do
        short_name=$container
        container="$(crowdr_fullname $container)"
        crowdr_names[$container]=$short_name
        case $option in
            command)
                crowdr_opts_command[$container]=$value
                continue
                ;;
            image)
                crowdr_opts_image[$container]=$value
                continue
                ;;
            build)
                crowdr_opts_build[$container]=$value
                continue
                ;;
            link)
                link="${value%%:*}"
                link="$(crowdr_fullname $link)"
                alias="${value##*:}"
                value="$link:$alias"
                ;;
            after.*|before.*)
                crowdr_opts_hook["$container~$option"]="$value"
                continue
                ;;
        esac
        crowdr_opts_run[$container]+=" --$option=$value"
    done < <(grep -vP '^#|^\S*$' <<< "$crowdr_config")
}

cmd="${1:-run}"
shift
crowdr_parse_cfg
[[ -x $CROWDR_HOOKDIR/before.$cmd ]] && $CROWDR_HOOK_EXEC $CROWDR_HOOKDIR/before.$cmd
crowdr_command_$cmd "$@"
[[ -x $CROWDR_HOOKDIR/after.$cmd  ]] && $CROWDR_HOOK_EXEC $CROWDR_HOOKDIR/after.$cmd
exit 0
